#数据源配置
spring:
  datasource:
    druid:
      driver-class-name: com.mysql.jdbc.Driver
      url: jdbc:mysql://127.0.0.1:3306/springboot?characterEncoding=utf8&useSSL=false&serverTimezone=Asia/Shanghai
      username: root
      password: 123456
      # 初始化大小，最小，最大
      initialSize: 5
      minIdle: 5
      maxActive: 20
      # 配置获取连接等待超时的时间
      maxWait: 60000
      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      timeBetweenEvictionRunsMillis: 60000
      # 配置一个连接在池中最小生存的时间，单位是毫秒
      minEvictableIdleTimeMillis: 300000
      validationQuery: SELECT 1 FROM DUAL
      testWhileIdle: true
      testOnBorrow: false
      testOnReturn: false
      # 打开PSCache，并且指定每个连接上PSCache的大小
      poolPreparedStatements: true
      maxPoolPreparedStatementPerConnectionSize: 20
      # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
      filters: stat,wall,slf4j
      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
      connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
      # 合并多个DruidDataSource的监控数据
      #useGlobalDataSourceStat=true
      # 开启监控，配置信息
      stat-view-servlet:
        login-username: druid
        login-password: 123456
        reset-enable: false
        enabled: true
        url-pattern: "/druid/*"
      # 开启 web 监控（Web应用、URI监控、Session监控）
      web-stat-filter:
        enabled: true
        url-pattern: /*
        exclusions: "*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*"
      # 开启 Spring 监控
      aop-patterns: com.imooc.springboot.databasepc.controller.*,com.imooc.springboot.databasepc.service.*,com.imooc.springboot.databasepc.mapper.*
      # 日志配置
      filter:
        slf4j:
          statement-log-enabled: true
          statement-executable-sql-log-enable: true
          enabled: true

  redis:
    host: 127.0.0.1
    port: 6379
    timeout: 1000
    jedis:
      pool:
        min-idle: 5
        max-active: 10
        max-idle: 10
        max-wait: 2000

server:
  servlet:
    context-path: /springboot

logging:
  level:
#    root: debug
    com.imooc.springboot.databasepc.mapper: debug
    org.springframework.jdbc.datasource: debug
